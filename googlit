#!/usr/bin/env python3
import configparser, glob, os, pyperclip, requests, shlex, subprocess, threading, time, trafilatura, webbrowser, urwid, youtube_dl
from importlib.machinery import SourceFileLoader
googler = SourceFileLoader("googler", "/usr/local/bin/googler").load_module()
from urllib.request import urlopen, urlparse, Request
from xdg.BaseDirectory import *

googler_options = []

# Configuration
os.makedirs(os.path.join(xdg_config_home, "googlit"), exist_ok=True)
config_defaults_googlit = {
        'path_googler': '/usr/local/bin/googler',
        'clear_search_on_focus': 'false',
        'country': 'us',
        'language': 'en',
        'max_results': '30',
        'exclude': 'androidbiits.com,linkedin.com,nolo.com,pinterest.*,simplelifestrategies.com,shopify.com,softlay.net,*.softonic.com', 
        'unfilter': 'false',
        'notweak': 'false',
        'ipv6': 'false',
        'termexec': 'xterm -e',
        'pager': 'less -r',
        'mediaplayer': 'mpv;noterm',
        'docviewer': 'antiword -f -w 80;pager',
        'pdfviewer': 'zathura;noterm',
        'tabviewer': 'visidata'
        }

config_defaults_pallette = {
        'border': 'dark blue,default',
        'searchbox': 'black,white',
        'searchbox_focus': 'white,dark blue',
        'reveal focus': 'white,dark blue,standout',
        'url': 'brown,default',
        'title': 'light green,default',
        'desc': 'default,default',
        'meta': 'dark cyan,default',
        'matches': 'dark magenta,default',
        'item_frame': 'black,black',
        'item_frame_focus': 'light cyan,default'
        }

config = configparser.ConfigParser()

def config_create():
    config.add_section('googlit')
    config.add_section('pallette')

    for i in config_defaults_googlit:
        config['googlit'][i] = config_defaults_googlit[i]

    for i in config_defaults_pallette:
        config['pallette'][i] = config_defaults_pallette[i]

    with open(os.path.join(xdg_config_home, 'googlit/config'), 'w') as configfile:
        config.write(configfile)

if not os.path.exists(os.path.join(xdg_config_home, 'googlit/config')):
    config_create()

config.read(os.path.join(xdg_config_home, 'googlit/config'))

# Check for missing keys
for i in config_defaults_googlit:
    if not config.has_option('googlit', i):
        config['googlit'][i] = config_defaults_googlit[i]
for i in config_defaults_pallette:
    if not config.has_option('pallette', i):
        config['pallette'][i] = config_defaults_pallette[i]
with open(os.path.join(xdg_config_home, 'googlit/config'), 'w') as configfile:
    config.write(configfile)
palette = [
        (['border']+config['pallette']['border'].split(',')),
        (['searchbox']+config['pallette']['searchbox'].split(',')),
        (['searchbox_focus']+config['pallette']['searchbox_focus'].split(',')),
        (['reveal focus']+config['pallette']['reveal focus'].split(',')),
        (['url']+config['pallette']['url'].split(',')),
        (['title']+config['pallette']['title'].split(',')),
        (['desc']+config['pallette']['desc'].split(',')),
        (['meta']+config['pallette']['meta'].split(',')),
        (['matches']+config['pallette']['matches'].split(',')),
        (['item_frame']+config['pallette']['item_frame'].split(',')),
        (['item_frame_focus']+config['pallette']['item_frame_focus'].split(','))
        ]
googler = SourceFileLoader("googler", os.path.expanduser(config['googlit']['path_googler'])).load_module()
clear_search_on_focus = config.getboolean('googlit', 'clear_search_on_focus')
googler_options.append('-c '+config['googlit']['country'])
googler_options.append('-l'+config['googlit']['language'])
googler_options.append('-n '+config['googlit']['max_results'])
exclude = config['googlit']['exclude'].split(',')
if config.getboolean('googlit', 'unfilter'):
    googler_options.append('--unfilter')
if config.getboolean('googlit', 'notweak'):
    googler_options.append('--notweak')
if config.getboolean('googlit', 'ipv6'):
    googler_options.append('--ipv6')
termexec = config['googlit']['termexec']
pager = config['googlit']['pager']
mediaplayer = config['googlit']['mediaplayer']
docviewer = config['googlit']['docviewer']
pdfviewer = config['googlit']['pdfviewer']
tabviewer = config['googlit']['tabviewer']

def download_and_open(url, viewer):
    response = requests.get(url, timeout=10, headers={'User-Agent': 'Mozilla/5.0'})
    fname = '/tmp/googlit/'+response.headers.get("Content-Disposition").split("filename=")[1] if "Content-Disposition" in response.headers.keys() else '/tmp/googlit/'+url.split("/")[-1]
    with open(fname, 'wb') as f:
        f.write(response.content)
    viewer, *options = viewer.split(';')

    if 'pager' in options:
        output = subprocess.run(shlex.split(viewer)+[f.name], stdout=subprocess.PIPE)
        with open(fname+'.txt', 'wb') as f:
            f.write(output.stdout)
        viewer = pager

    subprocess.Popen(shlex.split(viewer if 'noterm' in options else '%s %s' % (termexec, viewer))+[f.name], stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)

class SearchBox(urwid.Edit):
    def selectable(self):
        return True

    def keypress(self, size, key):
        if key == 'enter':
            PerformSearch(searchbox.base_widget.text)
            if content:
                frame.focus_position = 'body'
        elif key == 'tab':
            if content:
                frame.focus_position = 'body'
        else:
            super().keypress(size, key)
        return key

class ListBoxItem(urwid.Text):
    def selectable(self):
        return True

    def keypress(self, size, key):
        url = listbox.get_focus()[0].base_widget.text.splitlines()[1]

        if key == 'enter':
            webbrowser.open(url, new=2, autoraise=False)
        elif key in ('o', 'O'):
            os.makedirs(os.path.join(xdg_config_home, "/tmp/googlit"), exist_ok=True)
            # Youtube-like videos
            try:
                for e in youtube_dl.extractor.gen_extractors():
                    if e.suitable(url) and e.IE_NAME != 'generic':
                        subprocess.Popen([mediaplayer, url], stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
                        return key
            except:
                pass

            # Image galleries

            # Everything else
            response = requests.head(url, timeout=10, headers={'User-Agent': 'Mozilla/5.0'})
            if response.headers['content-type'].split('/')[0] == 'video':
                response = requests.head(url, timeout=10, headers={'User-Agent': 'Mozilla/5.0'})
                subprocess.Popen([mediaplayer, url], stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
            elif response.headers['content-type'] == 'application/msword' or url.split('/')[-1].split('.')[-1] == 'doc':
                thread = threading.Thread(target=download_and_open(url, docviewer))
                thread.start()
            elif response.headers['content-type'] in ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application', 'vnd.sqlite3,application/x-sqlite3', 'text/csv', 'application/x-hdf5'] or url.split('/')[-1].split('.')[-1] in ['csv', 'db', 'db-shm', 'hdf5', 'sqlite', 'sqlite-shm', 'sqlite-wal', 'tsv', 'xls', 'xlsx']:
                thread = threading.Thread(target=download_and_open(url, tabviewer))
                thread.start()
            elif response.headers['content-type'] == 'application/pdf' or url.split('/')[-1].split('.')[-1] == 'pdf':
                thread = threading.Thread(target=download_and_open(url, pdfviewer))
                thread.start()
            else:
                def preview_html():
                    downloaded = trafilatura.fetch_url(url)
                    if downloaded:
                        fname = '/tmp/googlit/%f.txt' % time.time()
                        result = trafilatura.extract(downloaded, include_formatting=True)
                        if result:
                            with open(fname, 'w') as f:
                                f.write(result)
                            subprocess.call(shlex.split('%s %s %s' % (termexec, pager, f.name)))
                thread = threading.Thread(target=preview_html)
                thread.start()
        elif key in ('y', 'Y'):
            pyperclip.copy(listbox.get_focus()[0].base_widget.text.splitlines()[1])
        elif key == 'tab':
            frame.focus_position = 'header'
            if clear_search_on_focus:
                searchbox.base_widget.edit_text = ''
        return key

def PerformSearch(term):
    results = []

    repl = googler.GooglerCmd(googler.parse_args(googler_options+[term+''.join([' -site:'+j for j in exclude])]))
    repl.fetch()

    for i in repl.results:
        # Assemble the matches string
        matches = ""
        if i.matches:
            for j in i.matches:
                if matches:
                    matches += ', '
                matches += "%s (%s)" % (j.get('phrase'), j.get('offset'))

        results.append(urwid.AttrMap(urwid.LineBox(ListBoxItem([("title", i.title+'\n'), ("url", i.url+'\n'), ("meta", i.metadata.replace(' | ', '\n')+'\n' if i.metadata else ""), ("matches", "Matches: %s" % (matches)+'\n' if matches else ""), ("desc", i.abstract)]), tlcorner='┏', tline='━', lline='┃', trcorner='┓', blcorner='┗', rline='┃', bline='━', brcorner='┛'), 'item_frame', focus_map='item_frame_focus'))

    content[:] = [urwid.AttrMap(w, None, 'default') for w in results]
    if results:
        listbox.focus_position = 0
    
def exit_on_cq(input):
    if input in ('ctrl q', 'ctrl Q'):
        # Clean up our mess
        for f in glob.glob('/tmp/googlit/*'):
            os.remove(f)
        raise urwid.ExitMainLoop()

searchicon = urwid.Text("\U0001F50D")
searchbox = urwid.AttrMap(SearchBox(""), "searchbox", focus_map="searchbox_focus")
content = urwid.SimpleListWalker([])
listbox = urwid.ListBox(content)
preview = urwid.Text("")

frame = urwid.Frame(listbox, urwid.Pile([urwid.Columns([(3, searchicon), searchbox]), urwid.AttrMap(urwid.Divider('─'), "border")]), focus_part="header")

loop = urwid.MainLoop(urwid.AttrMap(urwid.LineBox(urwid.AttrMap(frame, "default")), "border"), palette, unhandled_input=exit_on_cq)
loop.run()

